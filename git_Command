Introduction commnads:
 	Initialize Git:                          git init
	Check File Status:                       git status
	To check your current directory Use:     pwd

Configure Git commnads:
	User Name:                         git config --global user.name "Your Name"
	Email Address:                     git config --global user.email "you@example.com"
	List All Settings:                 git config --list
	View a Specific Setting:           git config user.name
	Set Default Branch Name:           git config --global init.defaultBranch main	
	
	//Use --global to set the value for every repository on your computer.
	//Use --local (the default) to set it only for the current repository.


staging commands:
	Stage a file:                     git add <filename>
	Stage all changes:                git add --all   or   git add -A
	See what is staged:               git status

Unstaging commands:
	Unstage a file:          git restore --staged <filename>   or    git rm --cached <filename>   or   git restore --staged <filename>
	Unstage a full folder:   git rm --cached -r <dirname>

commits commands:
	Commit staged changes with a message:       git commit -m "message"
	Commit all tracked changes (skip staging):  git commit -a -m "message"

Commit Options:
	Create an empty commit:		                          git commit --allow-empty -m "Start project"
	Use previous commit message (no editor): 		  git commit --no-edit
	Quickly add staged changes to last commit, keep message:  git commit --amend --no-edit
	
	See commit history:                           git log
	For a shorter view of history:                git log --oneline
	To see which files changed in each commit:    git log --stat

Tagging Commands:
	Create a lightweight tag:      git tag <tagname>
	Create an annotated tag:       git tag -a <tagname> -m "message"
	Tag a specific commit:         git tag <tagname> <commit-hash>
	List tags:                     git tag
	Show tag details:              git show <tagname>
	Push a Single Tag:             git push origin <tagname>
	Push All Tags:                 git push --tags
	Delete a tag locally:          git tag -d <tagname>
	Delete a tag(remote repo.):    git push origin --delete tag <tagname>

	move a tag to a different commit and update the remote:   	git tag -f <tagname> <new-commit-hash>

	overwrite a tag on the remote:      git push --force origin <tagname>
stash commands:
	Stash Your Work:          git stash
	Stash with a Message:     git stash push -m
	List All Stashes:         git stash list
	Show Stash Details:       git stash show
	Show Full Diff:           git stash show -p
	Apply the Latest Stash:   git stash apply
	Apply a Specific Stash:   git stash apply stash@{n}
	Pop the Stash:            git stash pop
	Drop a Stash:             git stash drop
	Clear All Stashes:        git stash clear //Always double-check before running it!
	Branch from a Stash:      git stash branch


Viewing History Commands:
	Show full commit history:               git log
	Show a summary of commits:     	        git log --oneline
	Show details of a specific commit:   	git show <commit>
	See unstaged changes:                   git diff
	See staged changes:                     git diff --staged
	Compare Two Commits:                    git diff <commit1> <commit2>
	Show Commits by Author:                 git log --author="Alice"
	Show Recent Commits:                    git log --since="2 weeks ago"
	Show a Branch Graph:                    git log --graph

Getting Help Commands:
	See the manual page for a command:       git help <command>
	See help for a command (same as above):  git <command> --help
	See a quick summary of options:          git <command> -h
	List all possible Git commands:          git help --all
	List guides and concepts:                git help -g

Git branch commands:
	Creating a New Branch:                    git branch <branchname>
	Listing All Branches:                     git branch
	Switching Between Branches:               git checkout <branchname>   or   git switch <branchname>
	Emergency Branch create and checkout:     git checkout -b emergency-fix
	See which branch you're on:               git status
	stage the file, and commit:               git add index.html           git commit -m "updated index.html with emergency fix"	
	Deleting a Branch:                        git branch -d <branchname>
	Delete a branch (not merged):             git branch -D <branchname>	
	Rename a branch:                          git branch -m <old-name> <new-name>

Git Branch Merge commands:
	Merging Branches:           git merge <branchname>    //First, we need to change to the master branch
	Non-Fast-Forward Merge:     git merge --no-ff
	Squash Merge:               git merge --squash
	Aborting a Merge:           git merge --abort


Pushing Changes (git push)
	Use this to send your commits to a remote repository:       git push
	
Pull Before You Push
	Always git pull before pushing.:              
			git pull origin main    
			git push origin main
			
Git Amend:
	change last commit message:       git commit --amend -m "New message"
	Add Files to Last Commit:         git add forgotten.txt  ------>  git commit --amend
	Remove Files from Last Commit:    git reset HEAD^ -- unwanted.txt  ------->  git commit --amend





























